{"version":3,"file":"index-DLFyq6_7.js","sources":["../../src/utils/Vector2.ts","../../src/entities/Bird.ts","../../src/entities/Ground.ts","../../src/entities/Pipe.ts","../../src/entities/Background.ts","../../src/entities/ScoreEffect.ts","../../src/entities/PowerUp.ts","../../src/entities/PowerUpEffect.ts","../../src/managers/InputHandler.ts","../../src/core/Game.ts","../../src/main.ts"],"sourcesContent":["/**\n * A 2D vector class for handling positions, velocities, and other 2D values\n */\nexport class Vector2 {\n  constructor(public x: number = 0, public y: number = 0) {}\n\n  /**\n   * Add another vector to this one\n   */\n  add(v: Vector2): Vector2 {\n    return new Vector2(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtract another vector from this one\n   */\n  subtract(v: Vector2): Vector2 {\n    return new Vector2(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Multiply this vector by a scalar value\n   */\n  multiply(scalar: number): Vector2 {\n    return new Vector2(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Calculate the magnitude (length) of this vector\n   */\n  magnitude(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * Normalize this vector (make it a unit vector)\n   */\n  normalize(): Vector2 {\n    const mag = this.magnitude();\n    if (mag === 0) {\n      return new Vector2();\n    }\n    return new Vector2(this.x / mag, this.y / mag);\n  }\n\n  /**\n   * Calculate the distance between this vector and another\n   */\n  distance(v: Vector2): number {\n    return this.subtract(v).magnitude();\n  }\n\n  /**\n   * Create a copy of this vector\n   */\n  clone(): Vector2 {\n    return new Vector2(this.x, this.y);\n  }\n} ","import { Entity } from '../core/Entity';\nimport { Vector2 } from '../utils/Vector2';\n\nexport type BirdColor = 'yellow' | 'red' | 'blue';\n\nexport class Bird implements Entity {\n  position: Vector2;\n  velocity: Vector2;\n  acceleration: Vector2;\n  width: number;\n  height: number;\n  rotation: number;\n  gravity: number;\n  flapStrength: number;\n  maxSpeed: number;\n  color: BirdColor;\n  \n  // Animation properties\n  sprites: HTMLImageElement[];\n  currentFrame: number;\n  frameTimer: number;\n  frameDuration: number;\n  \n  // Power-up properties\n  hasShield: boolean;\n  shieldTimer: number;\n  shieldDuration: number;\n  \n  constructor(x: number, y: number, color: BirdColor = 'yellow') {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(0, 0);\n    this.acceleration = new Vector2(0, 0);\n    this.width = 34; // Width of the bird sprite\n    this.height = 24; // Height of the bird sprite\n    this.rotation = 0;\n    this.gravity = 900; // Gravity strength\n    this.flapStrength = -350; // Negative because y-axis is inverted in canvas\n    this.maxSpeed = 400; // Maximum falling speed\n    this.color = color;\n    \n    // Initialize animation properties\n    this.sprites = [];\n    this.loadSprites();\n    this.currentFrame = 0;\n    this.frameTimer = 0;\n    this.frameDuration = 0.1; // Time between frame changes in seconds\n    \n    // Initialize power-up properties\n    this.hasShield = false;\n    this.shieldTimer = 0;\n    this.shieldDuration = 5; // Shield lasts for 5 seconds\n  }\n  \n  /**\n   * Load the bird sprite images\n   */\n  private loadSprites(): void {\n    const spriteFiles = [\n      `${this.color}bird-downflap.png`,\n      `${this.color}bird-midflap.png`,\n      `${this.color}bird-upflap.png`\n    ];\n    \n    // Load each sprite\n    spriteFiles.forEach(file => {\n      const img = new Image();\n      img.src = `./assets/sprites/${file}`;\n      this.sprites.push(img);\n    });\n  }\n  \n  /**\n   * Change the bird's color and reload sprites\n   */\n  setColor(color: BirdColor): void {\n    this.color = color;\n    this.sprites = []; // Clear existing sprites\n    this.loadSprites(); // Load new sprites\n  }\n  \n  /**\n   * Activate the shield power-up\n   */\n  activateShield(): void {\n    this.hasShield = true;\n    this.shieldTimer = 0;\n  }\n  \n  /**\n   * Make the bird flap its wings (jump)\n   */\n  flap(): void {\n    this.velocity.y = this.flapStrength;\n  }\n  \n  /**\n   * Update the bird's position, rotation, and animation\n   */\n  update(deltaTime: number): void {\n    // Apply gravity\n    this.acceleration.y = this.gravity;\n    \n    // Update velocity based on acceleration\n    this.velocity.y += this.acceleration.y * deltaTime;\n    \n    // Limit falling speed\n    if (this.velocity.y > this.maxSpeed) {\n      this.velocity.y = this.maxSpeed;\n    }\n    \n    // Update position based on velocity\n    this.position.x += this.velocity.x * deltaTime;\n    this.position.y += this.velocity.y * deltaTime;\n    \n    // Update rotation based on velocity\n    // When going up, rotate upward; when falling, rotate downward\n    const targetRotation = this.velocity.y > 0 ? \n      Math.min(Math.PI / 4, this.velocity.y / this.maxSpeed * Math.PI / 2) : \n      Math.max(-Math.PI / 6, this.velocity.y / this.flapStrength * Math.PI / 6);\n    \n    // Smooth rotation transition\n    this.rotation = this.rotation + (targetRotation - this.rotation) * 5 * deltaTime;\n    \n    // Update animation frame\n    this.frameTimer += deltaTime;\n    if (this.frameTimer >= this.frameDuration) {\n      this.frameTimer = 0;\n      this.currentFrame = (this.currentFrame + 1) % this.sprites.length;\n    }\n    \n    // Update shield timer\n    if (this.hasShield) {\n      this.shieldTimer += deltaTime;\n      if (this.shieldTimer >= this.shieldDuration) {\n        this.hasShield = false;\n      }\n    }\n  }\n  \n  /**\n   * Render the bird to the canvas\n   */\n  render(context: CanvasRenderingContext2D): void {\n    // Save the current context state\n    context.save();\n    \n    // Translate to the bird's position (center)\n    context.translate(this.position.x, this.position.y);\n    \n    // Rotate the context\n    context.rotate(this.rotation);\n    \n    // Draw the bird sprite\n    if (this.sprites.length > 0 && this.sprites[this.currentFrame].complete) {\n      context.drawImage(\n        this.sprites[this.currentFrame],\n        -this.width / 2,\n        -this.height / 2,\n        this.width,\n        this.height\n      );\n    } else {\n      // Fallback if sprites aren't loaded yet\n      // Use different colors based on bird type\n      let fillColor = '#f8e71c'; // Default yellow\n      if (this.color === 'red') fillColor = '#e74c3c';\n      if (this.color === 'blue') fillColor = '#3498db';\n      \n      context.fillStyle = fillColor;\n      context.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n    }\n    \n    // Draw shield effect if active\n    if (this.hasShield) {\n      const shieldRadius = Math.max(this.width, this.height) * 0.8;\n      const pulseScale = 1 + Math.sin(this.shieldTimer * 5) * 0.1;\n      const fadeOut = Math.min(1, (this.shieldDuration - this.shieldTimer) / 1.5);\n      \n      // Draw shield glow\n      const gradient = context.createRadialGradient(0, 0, 0, 0, 0, shieldRadius * pulseScale);\n      gradient.addColorStop(0, 'rgba(52, 152, 219, 0.1)');\n      gradient.addColorStop(0.7, 'rgba(52, 152, 219, 0.3)');\n      gradient.addColorStop(1, 'rgba(52, 152, 219, 0)');\n      \n      context.globalAlpha = fadeOut;\n      context.fillStyle = gradient;\n      context.beginPath();\n      context.arc(0, 0, shieldRadius * pulseScale, 0, Math.PI * 2);\n      context.fill();\n      \n      // Draw shield outline\n      context.strokeStyle = 'rgba(52, 152, 219, ' + fadeOut + ')';\n      context.lineWidth = 2;\n      context.beginPath();\n      context.arc(0, 0, shieldRadius * pulseScale, 0, Math.PI * 2);\n      context.stroke();\n      \n      context.globalAlpha = 1;\n    }\n    \n    // Restore the context state\n    context.restore();\n    \n    // Debug: draw collision box\n    const showDebugCollision = false; // Set to true to see collision box\n    if (showDebugCollision) {\n      context.strokeStyle = 'red';\n      context.lineWidth = 2;\n      context.strokeRect(\n        this.position.x - this.width / 2,\n        this.position.y - this.height / 2,\n        this.width,\n        this.height\n      );\n    }\n  }\n  \n  /**\n   * Check if the bird collides with another entity\n   */\n  collidesWith(other: Entity): boolean {\n    // Add a small buffer to make collision detection more forgiving\n    const collisionBuffer = 4; // Pixels of forgiveness\n    \n    // Get the bird's collision box coordinates with buffer\n    const birdLeft = this.position.x - this.width / 2 + collisionBuffer;\n    const birdRight = this.position.x + this.width / 2 - collisionBuffer;\n    const birdTop = this.position.y - this.height / 2 + collisionBuffer;\n    const birdBottom = this.position.y + this.height / 2 - collisionBuffer;\n    \n    // Get the other entity's collision box coordinates\n    let otherLeft, otherRight, otherTop, otherBottom;\n    \n    // Special handling for Pipe entities\n    if ('isTop' in other) {\n      // It's a pipe\n      const pipe = other as unknown as { isTop: boolean; position: Vector2; width: number; height: number };\n      otherLeft = pipe.position.x - pipe.width / 2;\n      otherRight = otherLeft + pipe.width;\n      \n      if (pipe.isTop) {\n        otherTop = pipe.position.y - pipe.height;\n        otherBottom = pipe.position.y;\n      } else {\n        otherTop = pipe.position.y;\n        otherBottom = pipe.position.y + pipe.height;\n      }\n    } else {\n      // Generic entity\n      otherLeft = other.position.x - other.width / 2;\n      otherRight = otherLeft + other.width;\n      otherTop = other.position.y - other.height / 2;\n      otherBottom = otherTop + other.height;\n    }\n    \n    // Check for overlap\n    return (\n      birdLeft < otherRight &&\n      birdRight > otherLeft &&\n      birdTop < otherBottom &&\n      birdBottom > otherTop\n    );\n  }\n} ","import { Entity } from '../core/Entity';\nimport { Vector2 } from '../utils/Vector2';\nimport { GAME_SPEED } from '../core/Game';\n\nexport class Ground implements Entity {\n  position: Vector2;\n  velocity: Vector2;\n  width: number;\n  height: number;\n  sprite: HTMLImageElement;\n  \n  constructor(x: number, y: number, width: number, height: number, speed: number = GAME_SPEED) {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(-speed, 0); // Use the provided speed or default to GAME_SPEED\n    this.width = width;\n    this.height = height;\n    \n    // Load ground sprite\n    this.sprite = new Image();\n    this.sprite.src = './assets/sprites/base.png';\n  }\n  \n  /**\n   * Update the ground's position\n   */\n  update(deltaTime: number): void {\n    // Update position based on velocity\n    this.position.x += this.velocity.x * deltaTime;\n    \n    // If the ground has moved too far left, reset its position\n    // We now reset it when it's just about to go completely off-screen\n    // This ensures smoother scrolling with no visible gaps\n    if (this.position.x < -this.width * 0.9) {\n      this.position.x += this.width * 2; // Jump ahead by 2 segments\n    }\n  }\n  \n  /**\n   * Set the ground speed\n   */\n  setSpeed(speed: number): void {\n    this.velocity.x = -speed;\n  }\n  \n  /**\n   * Render the ground to the canvas\n   */\n  render(context: CanvasRenderingContext2D): void {\n    if (this.sprite.complete) {\n      // Draw the ground sprite\n      context.drawImage(\n        this.sprite,\n        this.position.x - this.width / 2,\n        this.position.y - this.height / 2,\n        this.width,\n        this.height\n      );\n    } else {\n      // Fallback if sprite isn't loaded yet\n      // Draw the ground\n      context.fillStyle = '#DED895'; // Sandy color\n      context.fillRect(\n        this.position.x - this.width / 2,\n        this.position.y - this.height / 2,\n        this.width,\n        this.height\n      );\n      \n      // Draw a line at the top of the ground\n      context.strokeStyle = '#85643B';\n      context.lineWidth = 3;\n      context.beginPath();\n      context.moveTo(this.position.x - this.width / 2, this.position.y - this.height / 2);\n      context.lineTo(this.position.x + this.width / 2, this.position.y - this.height / 2);\n      context.stroke();\n      \n      // Draw some grass tufts\n      context.fillStyle = '#8ED943';\n      for (let i = 0; i < this.width; i += 30) {\n        const x = this.position.x - this.width / 2 + i;\n        const height = 5 + Math.random() * 5;\n        context.fillRect(x, this.position.y - this.height / 2 - height, 10, height);\n      }\n    }\n  }\n  \n  /**\n   * Check if the ground collides with another entity\n   */\n  collidesWith(other: Entity): boolean {\n    // Simple AABB collision detection\n    const halfWidthA = this.width / 2;\n    const halfHeightA = this.height / 2;\n    const halfWidthB = other.width / 2;\n    const halfHeightB = other.height / 2;\n    \n    // Calculate the distance between centers\n    const dx = Math.abs(this.position.x - other.position.x);\n    const dy = Math.abs(this.position.y - other.position.y);\n    \n    // Check if the distance is less than the sum of half-widths and half-heights\n    return dx < halfWidthA + halfWidthB && dy < halfHeightA + halfHeightB;\n  }\n} ","import { Entity } from '../core/Entity';\nimport { Vector2 } from '../utils/Vector2';\n\n// Import the game speed\nimport { GAME_SPEED } from '../core/Game';\n\nexport class Pipe implements Entity {\n  position: Vector2;\n  velocity: Vector2;\n  width: number;\n  height: number;\n  isTop: boolean;\n  isSpecial: boolean;\n  isPassed: boolean;\n  sprite: HTMLImageElement;\n  \n  constructor(x: number, y: number, height: number, isTop: boolean, isSpecial: boolean = false, speed: number = GAME_SPEED) {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(-speed, 0); // Use the provided speed or default to GAME_SPEED\n    this.width = 52; // Width of the pipe sprite\n    this.height = height;\n    this.isTop = isTop;\n    this.isSpecial = isSpecial;\n    this.isPassed = false;\n    \n    // Load pipe sprite based on type (green or red)\n    this.sprite = new Image();\n    this.sprite.src = this.isSpecial \n      ? './assets/sprites/pipe-red.png'\n      : './assets/sprites/pipe-green.png';\n  }\n  \n  /**\n   * Update the pipe's position\n   */\n  update(deltaTime: number): void {\n    // Update position based on velocity\n    this.position.x += this.velocity.x * deltaTime;\n  }\n  \n  /**\n   * Render the pipe to the canvas\n   */\n  render(context: CanvasRenderingContext2D): void {\n    if (this.sprite.complete) {\n      const pipeX = this.position.x - this.width / 2;\n      \n      if (this.isTop) {\n        // For top pipes, we need to flip the sprite vertically\n        context.save();\n        \n        // Draw the pipe upside down\n        context.translate(pipeX + this.width / 2, this.position.y);\n        context.scale(1, -1);\n        context.drawImage(\n          this.sprite,\n          -this.width / 2,\n          0,\n          this.width,\n          this.height\n        );\n        \n        context.restore();\n      } else {\n        // For bottom pipes, draw normally\n        context.drawImage(\n          this.sprite,\n          pipeX,\n          this.position.y,\n          this.width,\n          this.height\n        );\n      }\n    } else {\n      // Fallback if sprite isn't loaded yet\n      // Use different colors for special pipes\n      context.fillStyle = this.isSpecial ? '#E73C3C' : '#74BF2E'; // Red or Green\n      \n      // Draw the main pipe body\n      const pipeX = this.position.x - this.width / 2;\n      const pipeY = this.isTop ? this.position.y - this.height : this.position.y;\n      \n      context.fillRect(\n        pipeX,\n        pipeY,\n        this.width,\n        this.height\n      );\n      \n      // Draw the pipe cap\n      const capHeight = 20;\n      const capWidth = this.width + 10;\n      \n      context.fillRect(\n        this.position.x - capWidth / 2,\n        this.isTop ? this.position.y - this.height - capHeight : this.position.y,\n        capWidth,\n        capHeight\n      );\n    }\n    \n    // Debug: draw collision box\n    const showDebugCollision = false; // Set to true to see collision box\n    if (showDebugCollision) {\n      context.strokeStyle = 'red';\n      context.lineWidth = 2;\n      \n      const pipeX = this.position.x - this.width / 2;\n      const pipeY = this.isTop ? this.position.y - this.height : this.position.y;\n      \n      context.strokeRect(\n        pipeX,\n        pipeY,\n        this.width,\n        this.height\n      );\n    }\n  }\n  \n  /**\n   * Check if the pipe collides with another entity\n   */\n  collidesWith(other: Entity): boolean {\n    // Get the actual collision box coordinates\n    const pipeLeft = this.position.x - this.width / 2;\n    const pipeRight = pipeLeft + this.width;\n    \n    // For top pipes, the top is at (position.y - height) and bottom is at position.y\n    // For bottom pipes, the top is at position.y and bottom is at (position.y + height)\n    const pipeTop = this.isTop ? this.position.y - this.height : this.position.y;\n    const pipeBottom = this.isTop ? this.position.y : this.position.y + this.height;\n    \n    // Get the bird's collision box coordinates\n    const birdLeft = other.position.x - other.width / 2;\n    const birdRight = birdLeft + other.width;\n    const birdTop = other.position.y - other.height / 2;\n    const birdBottom = birdTop + other.height;\n    \n    // Check for overlap\n    return (\n      pipeLeft < birdRight &&\n      pipeRight > birdLeft &&\n      pipeTop < birdBottom &&\n      pipeBottom > birdTop\n    );\n  }\n  \n  /**\n   * Check if the pipe has been passed by the bird\n   */\n  checkPassed(birdX: number): boolean {\n    // Calculate the right edge of the pipe\n    const pipeRightEdge = this.position.x + this.width / 2;\n    \n    // Only check for top pipes to avoid counting twice\n    // Only count when the bird has fully passed the right edge of the pipe\n    if (this.isTop && !this.isPassed && birdX > pipeRightEdge) {\n      this.isPassed = true;\n      return true;\n    }\n    return false;\n  }\n} ","import { Entity } from '../core/Entity';\nimport { Vector2 } from '../utils/Vector2';\nimport { GAME_SPEED } from '../core/Game';\n\n/**\n * Background layer with parallax scrolling effect\n */\nexport class Background implements Entity {\n  position: Vector2;\n  velocity: Vector2;\n  width: number;\n  height: number;\n  layers: BackgroundLayer[];\n  backgroundImage: HTMLImageElement;\n  currentSpeed: number;\n  \n  constructor(width: number, height: number) {\n    this.position = new Vector2(width / 2, height / 2);\n    this.velocity = new Vector2(0, 0);\n    this.width = width;\n    this.height = height;\n    this.currentSpeed = GAME_SPEED;\n    \n    // Load background image\n    this.backgroundImage = new Image();\n    this.backgroundImage.src = './assets/sprites/background-day.png';\n    \n    // Create background layers with different speeds for parallax effect\n    this.layers = [\n      // Base ground (fastest)\n      new BackgroundLayer('#DED895', 0, height - 112, width, 112, 1, false, 'ground', true)\n    ];\n  }\n  \n  /**\n   * Update all background layers\n   */\n  update(deltaTime: number): void {\n    // Update each layer\n    for (const layer of this.layers) {\n      layer.update(deltaTime, this.currentSpeed);\n    }\n  }\n  \n  /**\n   * Set the current game speed\n   */\n  setSpeed(speed: number): void {\n    this.currentSpeed = speed;\n  }\n  \n  /**\n   * Render all background layers\n   */\n  render(context: CanvasRenderingContext2D): void {\n    // Draw the background image\n    const bgHeight = this.height - 112; // Leave space for ground\n    \n    // Calculate how many times to repeat the background horizontally\n    const bgWidth = this.backgroundImage.width;\n    const repetitions = Math.ceil(this.width / bgWidth) + 1;\n    \n    // Draw repeated background images\n    for (let i = 0; i < repetitions; i++) {\n      context.drawImage(\n        this.backgroundImage,\n        i * bgWidth,\n        0,\n        bgWidth,\n        bgHeight\n      );\n    }\n    \n    // Render each layer\n    for (const layer of this.layers) {\n      layer.render(context);\n    }\n  }\n  \n  /**\n   * Background doesn't collide with anything\n   */\n  collidesWith(other: Entity): boolean {\n    return false;\n  }\n}\n\n/**\n * Individual background layer with parallax effect\n */\nclass BackgroundLayer {\n  color: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  speedFactor: number;\n  segments: { x: number, width: number }[];\n  isCityscape: boolean;\n  cloudType: string;\n  isGround: boolean;\n  groundImage: HTMLImageElement | null = null;\n  \n  constructor(color: string, x: number, y: number, width: number, height: number, speedFactor: number, isCityscape: boolean = false, cloudType: string = 'medium', isGround: boolean = false) {\n    this.color = color;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.speedFactor = speedFactor;\n    this.isCityscape = isCityscape;\n    this.cloudType = cloudType;\n    this.isGround = isGround;\n    \n    // Create three segments for infinite scrolling\n    this.segments = [\n      { x: 0, width },\n      { x: width, width },\n      { x: width * 2, width }\n    ];\n    \n    // Load ground image if this is a ground layer\n    if (isGround) {\n      this.groundImage = new Image();\n      this.groundImage.src = '/assets/sprites/base.png';\n    }\n  }\n  \n  /**\n   * Update layer position based on speed factor\n   */\n  update(deltaTime: number, currentSpeed: number = GAME_SPEED): void {\n    // Skip update for static layers (speed factor 0)\n    if (this.speedFactor === 0) return;\n    \n    // Move each segment\n    for (let i = 0; i < this.segments.length; i++) {\n      // Move segment based on current game speed and speed factor\n      this.segments[i].x -= currentSpeed * this.speedFactor * deltaTime;\n      \n      // If segment has moved off-screen to the left, move it to the right\n      if (this.segments[i].x <= -this.width) {\n        // Move it to the end of the last segment\n        const lastSegmentIndex = (i === 0) ? this.segments.length - 1 : i - 1;\n        this.segments[i].x = this.segments[lastSegmentIndex].x + this.width;\n      }\n    }\n  }\n  \n  /**\n   * Render the layer\n   */\n  render(context: CanvasRenderingContext2D): void {\n    // Draw ground using the ground image\n    if (this.isGround && this.groundImage) {\n      for (const segment of this.segments) {\n        // Calculate how many times to repeat the ground image horizontally\n        const groundWidth = this.groundImage.width;\n        const repetitions = Math.ceil(segment.width / groundWidth) + 1;\n        \n        for (let i = 0; i < repetitions; i++) {\n          const x = segment.x + (i * groundWidth);\n          // Only draw if it would be visible on screen\n          if (x < -groundWidth || x > segment.width) continue;\n          \n          context.drawImage(\n            this.groundImage,\n            x,\n            this.y,\n            groundWidth,\n            this.height\n          );\n        }\n      }\n      return;\n    }\n    \n    // For other layer types (not used with the image assets)\n    context.fillStyle = this.color;\n    \n    // Draw sky (full background)\n    if (this.speedFactor === 0) {\n      context.fillRect(0, 0, this.width, this.height);\n      return;\n    }\n  }\n} ","import { Entity } from '../core/Entity';\nimport { Vector2 } from '../utils/Vector2';\n\n/**\n * Visual effect displayed when player scores a point\n */\nexport class ScoreEffect implements Entity {\n  position: Vector2;\n  velocity: Vector2;\n  width: number;\n  height: number;\n  opacity: number;\n  scale: number;\n  lifetime: number;\n  maxLifetime: number;\n  text: string;\n  \n  constructor(x: number, y: number, text: string = '+1') {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(0, -60); // Move upward\n    this.width = 40;\n    this.height = 40;\n    this.opacity = 1;\n    this.scale = 1;\n    this.lifetime = 0;\n    this.maxLifetime = 1.5; // Effect lasts for 1.5 seconds\n    this.text = text;\n  }\n  \n  /**\n   * Update the effect's position and appearance\n   */\n  update(deltaTime: number): void {\n    // Update position\n    this.position.x += this.velocity.x * deltaTime;\n    this.position.y += this.velocity.y * deltaTime;\n    \n    // Update lifetime\n    this.lifetime += deltaTime;\n    \n    // Calculate progress (0 to 1)\n    const progress = this.lifetime / this.maxLifetime;\n    \n    // Update appearance based on progress\n    if (progress < 0.2) {\n      // Growing phase\n      this.scale = 1 + progress * 2;\n      this.opacity = 1;\n    } else {\n      // Fading phase\n      this.scale = 1.4 - (progress - 0.2) * 0.5;\n      this.opacity = 1 - (progress - 0.2) * 1.25;\n    }\n  }\n  \n  /**\n   * Render the score effect\n   */\n  render(context: CanvasRenderingContext2D): void {\n    // Skip rendering if fully transparent\n    if (this.opacity <= 0) return;\n    \n    context.save();\n    \n    // Set text properties\n    context.font = `bold ${Math.floor(30 * this.scale)}px Arial`;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    \n    // Draw text with shadow\n    context.fillStyle = 'rgba(0, 0, 0, ' + (this.opacity * 0.5) + ')';\n    context.fillText(this.text, this.position.x + 2, this.position.y + 2);\n    \n    // Draw main text\n    context.fillStyle = 'rgba(255, 255, 255, ' + this.opacity + ')';\n    context.fillText(this.text, this.position.x, this.position.y);\n    \n    context.restore();\n  }\n  \n  /**\n   * Check if the effect has expired\n   */\n  isExpired(): boolean {\n    return this.lifetime >= this.maxLifetime;\n  }\n  \n  /**\n   * Score effects don't collide with anything\n   */\n  collidesWith(other: Entity): boolean {\n    return false;\n  }\n} ","import { Entity } from '../core/Entity';\nimport { Vector2 } from '../utils/Vector2';\nimport { GAME_SPEED } from '../core/Game';\n\nexport type PowerUpType = 'shield' | 'slowmo' | 'score';\n\nexport class PowerUp implements Entity {\n  position: Vector2;\n  velocity: Vector2;\n  width: number;\n  height: number;\n  type: PowerUpType;\n  isCollected: boolean;\n  animationTimer: number;\n  bobAmount: number;\n  rotationAngle: number;\n  \n  constructor(x: number, y: number, type: PowerUpType) {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(-GAME_SPEED, 0);\n    this.width = 40;\n    this.height = 40;\n    this.type = type;\n    this.isCollected = false;\n    this.animationTimer = 0;\n    this.bobAmount = 10; // Pixels to move up and down\n    this.rotationAngle = 0;\n  }\n  \n  /**\n   * Update the power-up's position and animation\n   */\n  update(deltaTime: number): void {\n    // Update position based on velocity\n    this.position.x += this.velocity.x * deltaTime;\n    \n    // Update animation\n    this.animationTimer += deltaTime;\n    \n    // Bobbing motion\n    const bobOffset = Math.sin(this.animationTimer * 3) * this.bobAmount;\n    this.position.y = this.position.y - bobOffset * deltaTime * 5;\n    \n    // Rotation\n    this.rotationAngle += deltaTime * 2;\n    if (this.rotationAngle > Math.PI * 2) {\n      this.rotationAngle -= Math.PI * 2;\n    }\n  }\n  \n  /**\n   * Set the power-up's speed\n   */\n  setSpeed(speed: number): void {\n    this.velocity.x = -speed;\n  }\n  \n  /**\n   * Render the power-up to the canvas\n   */\n  render(context: CanvasRenderingContext2D): void {\n    // Save the current context state\n    context.save();\n    \n    // Translate to the power-up's position (center)\n    context.translate(this.position.x, this.position.y);\n    \n    // Rotate the context\n    context.rotate(this.rotationAngle);\n    \n    // Draw the power-up based on its type\n    const halfWidth = this.width / 2;\n    const halfHeight = this.height / 2;\n    \n    // Draw a glowing circle\n    const gradient = context.createRadialGradient(0, 0, 5, 0, 0, halfWidth);\n    \n    switch (this.type) {\n      case 'shield':\n        gradient.addColorStop(0, 'rgba(52, 152, 219, 1)'); // Blue center\n        gradient.addColorStop(1, 'rgba(52, 152, 219, 0)'); // Transparent edge\n        break;\n      case 'slowmo':\n        gradient.addColorStop(0, 'rgba(155, 89, 182, 1)'); // Purple center\n        gradient.addColorStop(1, 'rgba(155, 89, 182, 0)'); // Transparent edge\n        break;\n      case 'score':\n        gradient.addColorStop(0, 'rgba(241, 196, 15, 1)'); // Yellow center\n        gradient.addColorStop(1, 'rgba(241, 196, 15, 0)'); // Transparent edge\n        break;\n    }\n    \n    context.fillStyle = gradient;\n    context.beginPath();\n    context.arc(0, 0, halfWidth, 0, Math.PI * 2);\n    context.fill();\n    \n    // Draw the power-up icon\n    context.fillStyle = 'white';\n    context.strokeStyle = 'black';\n    context.lineWidth = 2;\n    \n    switch (this.type) {\n      case 'shield':\n        // Draw a shield icon\n        context.beginPath();\n        context.moveTo(0, -halfHeight * 0.5);\n        context.lineTo(halfWidth * 0.6, halfHeight * 0.3);\n        context.lineTo(0, halfHeight * 0.7);\n        context.lineTo(-halfWidth * 0.6, halfHeight * 0.3);\n        context.closePath();\n        context.fill();\n        context.stroke();\n        break;\n      case 'slowmo':\n        // Draw a clock icon\n        context.beginPath();\n        context.arc(0, 0, halfWidth * 0.6, 0, Math.PI * 2);\n        context.fill();\n        context.stroke();\n        \n        // Draw clock hands\n        context.beginPath();\n        context.moveTo(0, 0);\n        context.lineTo(0, -halfHeight * 0.4);\n        context.stroke();\n        \n        context.beginPath();\n        context.moveTo(0, 0);\n        context.lineTo(halfWidth * 0.3, 0);\n        context.stroke();\n        break;\n      case 'score':\n        // Draw a star icon\n        const spikes = 5;\n        const outerRadius = halfWidth * 0.7;\n        const innerRadius = outerRadius * 0.4;\n        \n        context.beginPath();\n        for (let i = 0; i < spikes * 2; i++) {\n          const radius = i % 2 === 0 ? outerRadius : innerRadius;\n          const angle = (Math.PI / spikes) * i - Math.PI / 2;\n          const x = radius * Math.cos(angle);\n          const y = radius * Math.sin(angle);\n          \n          if (i === 0) {\n            context.moveTo(x, y);\n          } else {\n            context.lineTo(x, y);\n          }\n        }\n        context.closePath();\n        context.fill();\n        context.stroke();\n        break;\n    }\n    \n    // Restore the context state\n    context.restore();\n    \n    // Debug: draw collision box\n    const showDebugCollision = false; // Set to true to see collision box\n    if (showDebugCollision) {\n      context.strokeStyle = 'red';\n      context.lineWidth = 2;\n      context.strokeRect(\n        this.position.x - this.width / 2,\n        this.position.y - this.height / 2,\n        this.width,\n        this.height\n      );\n    }\n  }\n  \n  /**\n   * Check if the power-up collides with another entity\n   */\n  collidesWith(other: Entity): boolean {\n    // Simple AABB collision detection\n    const halfWidthA = this.width / 2;\n    const halfHeightA = this.height / 2;\n    const halfWidthB = other.width / 2;\n    const halfHeightB = other.height / 2;\n    \n    // Calculate the distance between centers\n    const dx = Math.abs(this.position.x - other.position.x);\n    const dy = Math.abs(this.position.y - other.position.y);\n    \n    // Check if the distance is less than the sum of half-widths and half-heights\n    return dx < halfWidthA + halfWidthB && dy < halfHeightA + halfHeightB;\n  }\n} ","import { Entity } from '../core/Entity';\nimport { Vector2 } from '../utils/Vector2';\nimport { PowerUpType } from './PowerUp';\n\nexport class PowerUpEffect implements Entity {\n  position: Vector2;\n  velocity: Vector2;\n  width: number;\n  height: number;\n  type: PowerUpType;\n  lifetime: number;\n  maxLifetime: number;\n  scale: number;\n  opacity: number;\n  \n  constructor(x: number, y: number, type: PowerUpType) {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(0, -50); // Move upward\n    this.width = 80;\n    this.height = 80;\n    this.type = type;\n    this.lifetime = 0;\n    this.maxLifetime = 1.5; // Seconds\n    this.scale = 0.5;\n    this.opacity = 1;\n  }\n  \n  /**\n   * Update the effect's position and appearance\n   */\n  update(deltaTime: number): void {\n    // Update position\n    this.position.x += this.velocity.x * deltaTime;\n    this.position.y += this.velocity.y * deltaTime;\n    \n    // Update lifetime\n    this.lifetime += deltaTime;\n    \n    // Calculate progress (0 to 1)\n    const progress = this.lifetime / this.maxLifetime;\n    \n    // First half: grow and fade in\n    if (progress < 0.3) {\n      this.scale = 0.5 + (progress / 0.3) * 0.5;\n      this.opacity = Math.min(1, progress * 3);\n    } \n    // Second half: fade out\n    else {\n      this.scale = 1;\n      this.opacity = Math.max(0, 1 - ((progress - 0.3) / 0.7));\n    }\n  }\n  \n  /**\n   * Check if the effect has expired\n   */\n  isExpired(): boolean {\n    return this.lifetime >= this.maxLifetime;\n  }\n  \n  /**\n   * Render the effect to the canvas\n   */\n  render(context: CanvasRenderingContext2D): void {\n    // Save the current context state\n    context.save();\n    \n    // Set global alpha for fading\n    context.globalAlpha = this.opacity;\n    \n    // Translate to the effect's position (center)\n    context.translate(this.position.x, this.position.y);\n    \n    // Scale the context\n    context.scale(this.scale, this.scale);\n    \n    // Draw the effect based on its type\n    const halfWidth = this.width / 2;\n    const halfHeight = this.height / 2;\n    \n    // Draw text label\n    context.fillStyle = 'white';\n    context.strokeStyle = 'black';\n    context.lineWidth = 3;\n    context.font = 'bold 20px Arial';\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    \n    let text = '';\n    switch (this.type) {\n      case 'shield':\n        text = 'SHIELD!';\n        context.fillStyle = '#3498db'; // Blue\n        break;\n      case 'slowmo':\n        text = 'SLOW-MO!';\n        context.fillStyle = '#9b59b6'; // Purple\n        break;\n      case 'score':\n        text = 'DOUBLE SCORE!';\n        context.fillStyle = '#f1c40f'; // Yellow\n        break;\n    }\n    \n    // Draw text with shadow\n    context.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    context.shadowBlur = 5;\n    context.shadowOffsetX = 2;\n    context.shadowOffsetY = 2;\n    \n    context.strokeText(text, 0, 0);\n    context.fillText(text, 0, 0);\n    \n    // Restore the context state\n    context.restore();\n  }\n  \n  /**\n   * Power-up effects don't collide with anything\n   */\n  collidesWith(other: Entity): boolean {\n    return false;\n  }\n} ","/**\n * Handles user input for the game\n */\nexport class InputHandler {\n  private keys: { [key: string]: boolean } = {};\n  private mouseDown: boolean = false;\n  private touchActive: boolean = false;\n  isFlapping: boolean = false;\n  \n  constructor() {\n    // Initialize with all keys up\n    this.keys = {};\n    \n    // Add event listeners\n    this.addEventListeners();\n  }\n  \n  /**\n   * Add all event listeners\n   */\n  addEventListeners(): void {\n    // Keyboard events\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    window.addEventListener('keyup', this.handleKeyUp.bind(this));\n    \n    // Mouse events\n    window.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    window.addEventListener('mouseup', this.handleMouseUp.bind(this));\n    \n    // Touch events\n    window.addEventListener('touchstart', this.handleTouchStart.bind(this));\n    window.addEventListener('touchend', this.handleTouchEnd.bind(this));\n  }\n  \n  /**\n   * Remove all event listeners\n   */\n  removeEventListeners(): void {\n    // Keyboard events\n    window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    window.removeEventListener('keyup', this.handleKeyUp.bind(this));\n    \n    // Mouse events\n    window.removeEventListener('mousedown', this.handleMouseDown.bind(this));\n    window.removeEventListener('mouseup', this.handleMouseUp.bind(this));\n    \n    // Touch events\n    window.removeEventListener('touchstart', this.handleTouchStart.bind(this));\n    window.removeEventListener('touchend', this.handleTouchEnd.bind(this));\n  }\n  \n  /**\n   * Handle keydown events\n   */\n  private handleKeyDown(event: KeyboardEvent): void {\n    this.keys[event.key] = true;\n    \n    // Handle specific key presses\n    if (event.key === ' ' || event.key === 'ArrowUp') {\n      this.isFlapping = true;\n      event.preventDefault();\n    }\n  }\n  \n  /**\n   * Handle keyup events\n   */\n  private handleKeyUp(event: KeyboardEvent): void {\n    this.keys[event.key] = false;\n  }\n  \n  /**\n   * Handle mousedown events\n   */\n  private handleMouseDown(event: MouseEvent): void {\n    this.mouseDown = true;\n    this.isFlapping = true;\n  }\n  \n  /**\n   * Handle mouseup events\n   */\n  private handleMouseUp(event: MouseEvent): void {\n    this.mouseDown = false;\n  }\n  \n  /**\n   * Handle touchstart events\n   */\n  private handleTouchStart(event: TouchEvent): void {\n    this.touchActive = true;\n    this.isFlapping = true;\n    event.preventDefault();\n  }\n  \n  /**\n   * Handle touchend events\n   */\n  private handleTouchEnd(event: TouchEvent): void {\n    this.touchActive = false;\n    event.preventDefault();\n  }\n  \n  /**\n   * Check if a specific key is pressed\n   */\n  isKeyPressed(key: string): boolean {\n    return this.keys[key] === true;\n  }\n  \n  /**\n   * Check if any flap input is active\n   */\n  isFlapActive(): boolean {\n    return (\n      this.isKeyPressed(' ') ||\n      this.isKeyPressed('ArrowUp') ||\n      this.mouseDown ||\n      this.touchActive\n    );\n  }\n} ","import { Bird, BirdColor } from '../entities/Bird';\nimport { Ground } from '../entities/Ground';\nimport { Pipe } from '../entities/Pipe';\nimport { Background } from '../entities/Background';\nimport { ScoreEffect } from '../entities/ScoreEffect';\nimport { PowerUp, PowerUpType } from '../entities/PowerUp';\nimport { PowerUpEffect } from '../entities/PowerUpEffect';\nimport { InputHandler } from '../managers/InputHandler';\nimport { Entity } from './Entity';\n\n// Game constants\nexport const GAME_SPEED = 200; // Base speed in pixels per second\nexport const MAX_GAME_SPEED = 400; // Maximum game speed\nexport const MIN_PIPE_GAP = 100; // Minimum gap between pipes\nexport const INITIAL_PIPE_GAP = 150; // Initial gap between pipes\nexport const MIN_PIPE_INTERVAL = 0.8; // Minimum time between pipe spawns\nexport const INITIAL_PIPE_INTERVAL = 1.5; // Initial time between pipe spawns\n\n/**\n * Main game class that manages the game state and entities\n */\nexport class Game {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private bird!: Bird; // Using the definite assignment assertion\n  private grounds: Ground[] = [];\n  private pipes: Pipe[] = [];\n  private background!: Background;\n  private scoreEffects: ScoreEffect[] = [];\n  private powerUps: PowerUp[] = [];\n  private powerUpEffects: PowerUpEffect[] = [];\n  private entities: Entity[] = [];\n  private inputHandler: InputHandler;\n  private lastTime: number = 0;\n  private score: number = 0;\n  private highScore: number = 0;\n  private gameOver: boolean = false;\n  private isPaused: boolean = false;\n  private pipeSpawnTimer: number = 0;\n  private pipeSpawnInterval: number = INITIAL_PIPE_INTERVAL; // Seconds between pipe spawns\n  private powerUpSpawnTimer: number = 0;\n  private powerUpSpawnInterval: number = 10; // Seconds between power-up spawns\n  private gameWidth: number;\n  private gameHeight: number;\n  private currentGameSpeed: number = GAME_SPEED; // Current game speed\n  private currentPipeGap: number = INITIAL_PIPE_GAP; // Current gap between pipes\n  private useSpecialPipes: boolean = false; // Whether to use special (red) pipes\n  private selectedBirdColor: BirdColor = 'yellow'; // Default bird color\n  \n  // Power-up effects\n  private hasSlowMotion: boolean = false;\n  private slowMotionTimer: number = 0;\n  private slowMotionDuration: number = 5; // Seconds\n  private hasScoreBoost: boolean = false;\n  private scoreBoostTimer: number = 0;\n  private scoreBoostDuration: number = 10; // Seconds\n  \n  // Sound effects\n  private sounds: {[key: string]: HTMLAudioElement} = {};\n  private isSoundEnabled: boolean = true;\n  \n  constructor() {\n    // Get the canvas element\n    this.canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n    this.context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    \n    // Set canvas size\n    this.gameWidth = 480;  // Increased from 320\n    this.gameHeight = 640; // Increased from 480\n    this.canvas.width = this.gameWidth;\n    this.canvas.height = this.gameHeight;\n    \n    // Load high score from local storage\n    const savedHighScore = localStorage.getItem('flappyBirdHighScore');\n    if (savedHighScore) {\n      this.highScore = parseInt(savedHighScore);\n    }\n    \n    // Load saved bird color from local storage\n    const savedBirdColor = localStorage.getItem('flappyBirdColor');\n    if (savedBirdColor && ['yellow', 'red', 'blue'].includes(savedBirdColor)) {\n      this.selectedBirdColor = savedBirdColor as BirdColor;\n      \n      // Update the UI to reflect the saved color\n      this.updateCharacterSelectionUI();\n    }\n    \n    // Load sound effects\n    this.loadSounds();\n    \n    // Initialize input handler\n    this.inputHandler = new InputHandler();\n    \n    // Initialize the game\n    this.init();\n    \n    // Set up event listeners\n    this.setupEventListeners();\n  }\n  \n  /**\n   * Update the character selection UI to reflect the selected color\n   */\n  private updateCharacterSelectionUI(): void {\n    // Remove 'selected' class from all options\n    const options = document.querySelectorAll('.character-option');\n    options.forEach(option => option.classList.remove('selected'));\n    \n    // Add 'selected' class to the selected color\n    const selectedOption = document.querySelector(`.character-option[data-color=\"${this.selectedBirdColor}\"]`);\n    if (selectedOption) {\n      selectedOption.classList.add('selected');\n    }\n  }\n  \n  /**\n   * Load sound effects\n   */\n  private loadSounds(): void {\n    const soundFiles = {\n      flap: 'wing.ogg',\n      score: 'point.ogg',\n      hit: 'hit.ogg',\n      die: 'die.ogg',\n      swoosh: 'swoosh.ogg'\n    };\n    \n    // Load each sound\n    for (const [name, file] of Object.entries(soundFiles)) {\n      const audio = new Audio(`./assets/audio/${file}`);\n      this.sounds[name] = audio;\n    }\n  }\n  \n  /**\n   * Play a sound effect\n   */\n  private playSound(name: string): void {\n    if (this.isSoundEnabled && this.sounds[name]) {\n      // Clone the audio to allow overlapping sounds\n      const sound = this.sounds[name].cloneNode() as HTMLAudioElement;\n      sound.volume = 0.5; // Set volume to 50%\n      sound.play().catch(e => console.log('Error playing sound:', e));\n    }\n  }\n  \n  /**\n   * Toggle sound on/off\n   */\n  toggleSound(): void {\n    this.isSoundEnabled = !this.isSoundEnabled;\n  }\n  \n  /**\n   * Initialize the game\n   */\n  private init(): void {\n    // Reset difficulty settings\n    this.currentGameSpeed = GAME_SPEED;\n    this.currentPipeGap = INITIAL_PIPE_GAP;\n    this.pipeSpawnInterval = INITIAL_PIPE_INTERVAL;\n    this.useSpecialPipes = false;\n    \n    // Reset power-up effects\n    this.hasSlowMotion = false;\n    this.slowMotionTimer = 0;\n    this.hasScoreBoost = false;\n    this.scoreBoostTimer = 0;\n    \n    // Create the bird with the selected color\n    this.bird = new Bird(this.gameWidth * 0.3, this.gameHeight / 2, this.selectedBirdColor);\n    \n    // Create the background\n    this.background = new Background(this.gameWidth, this.gameHeight);\n    \n    // Create the ground segments\n    const groundHeight = 112; // Height of the ground sprite\n    const groundY = this.gameHeight - groundHeight / 2;\n    \n    // Create three ground segments for smooth scrolling\n    this.grounds = []; // Clear existing grounds\n    for (let i = 0; i < 3; i++) {\n      const ground = new Ground(\n        this.gameWidth / 2 + i * this.gameWidth,\n        groundY,\n        this.gameWidth,\n        groundHeight,\n        this.currentGameSpeed // Pass current game speed\n      );\n      this.grounds.push(ground);\n    }\n    \n    // Reset game state\n    this.score = 0;\n    this.gameOver = false;\n    this.isPaused = false;\n    this.pipeSpawnTimer = 0;\n    this.powerUpSpawnTimer = 0;\n    this.pipes = [];\n    this.powerUps = [];\n    this.scoreEffects = [];\n    this.powerUpEffects = [];\n    \n    // Add entities to the entities array\n    this.entities = [\n      this.background,\n      this.bird,\n      ...this.grounds\n    ];\n    \n    // Show the start screen\n    document.getElementById('start-screen')!.style.display = 'flex';\n    document.getElementById('game-over-screen')!.style.display = 'none';\n  }\n  \n  /**\n   * Set up event listeners\n   */\n  private setupEventListeners(): void {\n    // Start button\n    document.getElementById('start-button')!.addEventListener('click', () => {\n      this.start();\n    });\n    \n    // Restart button\n    document.getElementById('restart-button')!.addEventListener('click', () => {\n      this.restart();\n    });\n    \n    // Keyboard events for pausing\n    window.addEventListener('keydown', (e) => {\n      if (e.key === 'p' || e.key === 'P') {\n        this.togglePause();\n      }\n    });\n    \n    // Character selection\n    const characterOptions = document.querySelectorAll('.character-option');\n    characterOptions.forEach(option => {\n      option.addEventListener('click', (e) => {\n        const target = e.currentTarget as HTMLElement;\n        const color = target.getAttribute('data-color') as BirdColor;\n        \n        if (color) {\n          // Update selected color\n          this.selectedBirdColor = color;\n          \n          // Save to local storage\n          localStorage.setItem('flappyBirdColor', color);\n          \n          // Update UI\n          characterOptions.forEach(opt => opt.classList.remove('selected'));\n          target.classList.add('selected');\n          \n          // Update bird if it exists\n          if (this.bird) {\n            this.bird.setColor(color);\n          }\n          \n          // Play sound\n          this.playSound('swoosh');\n        }\n      });\n    });\n  }\n  \n  /**\n   * Start the game\n   */\n  start(): void {\n    // Hide the start screen\n    document.getElementById('start-screen')!.style.display = 'none';\n    \n    // Play swoosh sound\n    this.playSound('swoosh');\n    \n    // Start the game loop\n    this.lastTime = performance.now();\n    requestAnimationFrame(this.gameLoop.bind(this));\n  }\n  \n  /**\n   * Restart the game\n   */\n  restart(): void {\n    // Hide the game over screen\n    document.getElementById('game-over-screen')!.style.display = 'none';\n    \n    // Play swoosh sound\n    this.playSound('swoosh');\n    \n    // Re-initialize the game\n    this.init();\n    \n    // Start the game\n    this.start();\n  }\n  \n  /**\n   * Toggle pause state\n   */\n  togglePause(): void {\n    this.isPaused = !this.isPaused;\n    \n    if (this.isPaused) {\n      // Show pause message\n      this.context.fillStyle = 'rgba(0, 0, 0, 0.5)';\n      this.context.fillRect(0, 0, this.gameWidth, this.gameHeight);\n      this.context.fillStyle = 'white';\n      this.context.font = '36px Arial';\n      this.context.textAlign = 'center';\n      this.context.fillText('PAUSED', this.gameWidth / 2, this.gameHeight / 2);\n      this.context.font = '24px Arial';\n      this.context.fillText('Press P to resume', this.gameWidth / 2, this.gameHeight / 2 + 40);\n    } else {\n      // Resume game\n      this.lastTime = performance.now();\n      requestAnimationFrame(this.gameLoop.bind(this));\n    }\n  }\n  \n  /**\n   * Handle bird flap\n   */\n  private handleFlap(): void {\n    if (!this.gameOver && !this.isPaused) {\n      this.bird.flap();\n      this.playSound('flap');\n    }\n  }\n  \n  /**\n   * Update difficulty based on score\n   */\n  private updateDifficulty(): void {\n    // 1. Speed Acceleration: Every 5 points, increase speed by 10%\n    const speedLevel = Math.floor(this.score / 5);\n    const speedMultiplier = 1 + (speedLevel * 0.1);\n    this.currentGameSpeed = Math.min(GAME_SPEED * speedMultiplier, MAX_GAME_SPEED);\n    \n    // 2. Pipe Gap Reduction: Every 10 points, decrease gap by 5 pixels\n    const gapReduction = Math.floor(this.score / 10) * 5;\n    this.currentPipeGap = Math.max(INITIAL_PIPE_GAP - gapReduction, MIN_PIPE_GAP);\n    \n    // 3. Pipe Frequency Increase: Every 15 points, decrease interval by 0.1 seconds\n    const intervalReduction = Math.floor(this.score / 15) * 0.1;\n    this.pipeSpawnInterval = Math.max(INITIAL_PIPE_INTERVAL - intervalReduction, MIN_PIPE_INTERVAL);\n    \n    // 4. Pipe Variation: After 25 points, introduce special pipes\n    this.useSpecialPipes = this.score >= 25;\n    \n    // Update speed for existing entities\n    this.updateEntitySpeeds();\n  }\n  \n  /**\n   * Update the speed of all entities that support speed changes\n   */\n  private updateEntitySpeeds(): void {\n    // Update ground speed\n    for (const ground of this.grounds) {\n      ground.setSpeed(this.currentGameSpeed);\n    }\n    \n    // Update background speed\n    this.background.setSpeed(this.currentGameSpeed);\n    \n    // Update pipe speeds (only affects new pipes, existing ones keep their initial speed)\n  }\n  \n  /**\n   * Main game loop\n   */\n  private gameLoop(timestamp: number): void {\n    // Calculate delta time\n    const deltaTime = (timestamp - this.lastTime) / 1000; // Convert to seconds\n    this.lastTime = timestamp;\n    \n    // Skip update if paused\n    if (this.isPaused) return;\n    \n    // Clear the canvas\n    this.context.clearRect(0, 0, this.gameWidth, this.gameHeight);\n    \n    // Handle input\n    if (this.inputHandler.isFlapping) {\n      this.handleFlap();\n      this.inputHandler.isFlapping = false; // Reset flap state\n    }\n    \n    // Update difficulty based on score\n    this.updateDifficulty();\n    \n    // Update power-up effects\n    this.updatePowerUpEffects(deltaTime);\n    \n    // Update pipe spawn timer\n    if (!this.gameOver) {\n      this.pipeSpawnTimer += deltaTime;\n      if (this.pipeSpawnTimer >= this.pipeSpawnInterval) {\n        this.pipeSpawnTimer = 0;\n        this.spawnPipes();\n      }\n      \n      // Update power-up spawn timer\n      this.powerUpSpawnTimer += deltaTime;\n      if (this.powerUpSpawnTimer >= this.powerUpSpawnInterval) {\n        this.powerUpSpawnTimer = 0;\n        this.spawnPowerUp();\n      }\n    }\n    \n    // Update all entities\n    for (const entity of this.entities) {\n      entity.update(deltaTime);\n    }\n    \n    // Check for collisions\n    if (!this.gameOver) {\n      this.checkCollisions();\n    }\n    \n    // Check if bird has passed a pipe\n    if (!this.gameOver) {\n      this.checkPipePassed();\n    }\n    \n    // Check if bird has collected a power-up\n    if (!this.gameOver) {\n      this.checkPowerUpCollected();\n    }\n    \n    // Clean up expired score effects\n    this.cleanupScoreEffects();\n    \n    // Clean up expired power-up effects\n    this.cleanupPowerUpEffects();\n    \n    // Clean up off-screen pipes\n    this.cleanupPipes();\n    \n    // Clean up off-screen power-ups\n    this.cleanupPowerUps();\n    \n    // Render all entities\n    for (const entity of this.entities) {\n      entity.render(this.context);\n    }\n    \n    // Draw the score\n    this.drawScore();\n    \n    // Draw active power-ups\n    this.drawActivePowerUps();\n    \n    // Continue the game loop\n    if (!this.gameOver) {\n      requestAnimationFrame(this.gameLoop.bind(this));\n    }\n  }\n  \n  /**\n   * Spawn a new pair of pipes\n   */\n  private spawnPipes(): void {\n    // Calculate random gap position with more variation at higher scores\n    const variationFactor = Math.min(1, this.score / 50); // Increases up to 1 at score 50\n    const minGapY = this.gameHeight * (0.2 + variationFactor * 0.1); // Increases from 0.2 to 0.3\n    const maxGapY = this.gameHeight * (0.8 - variationFactor * 0.1); // Decreases from 0.8 to 0.7\n    const gapY = minGapY + Math.random() * (maxGapY - minGapY);\n    \n    // Use current pipe gap (affected by difficulty)\n    const gapHeight = this.currentPipeGap;\n    \n    // Determine if this should be a special pipe\n    const isSpecialPipe = this.useSpecialPipes && Math.random() < 0.2; // 20% chance for special pipe\n    \n    // Create top pipe\n    const topPipeHeight = gapY;\n    const topPipe = new Pipe(\n      this.gameWidth + 100, // Start off-screen\n      gapY - gapHeight / 2,\n      topPipeHeight,\n      true, // isTop\n      isSpecialPipe, // isSpecial\n      this.currentGameSpeed // Use current game speed\n    );\n    \n    // Create bottom pipe\n    const bottomPipeY = gapY + gapHeight / 2;\n    const bottomPipeHeight = this.gameHeight - bottomPipeY;\n    const bottomPipe = new Pipe(\n      this.gameWidth + 100, // Start off-screen\n      bottomPipeY,\n      bottomPipeHeight,\n      false, // isTop\n      isSpecialPipe, // isSpecial\n      this.currentGameSpeed // Use current game speed\n    );\n    \n    // Add pipes to the game\n    this.pipes.push(topPipe, bottomPipe);\n    this.entities.push(topPipe, bottomPipe);\n  }\n  \n  /**\n   * Check for collisions between the bird and other entities\n   */\n  private checkCollisions(): void {\n    // Check collision with ground\n    for (const ground of this.grounds) {\n      if (this.bird.collidesWith(ground)) {\n        this.handleCollision();\n        return;\n      }\n    }\n    \n    // Check collision with pipes\n    for (const pipe of this.pipes) {\n      if (this.bird.collidesWith(pipe)) {\n        this.handleCollision();\n        return;\n      }\n    }\n    \n    // Check if bird is out of bounds (top of screen)\n    if (this.bird.position.y - this.bird.height / 2 < 0) {\n      this.handleCollision();\n      return;\n    }\n  }\n  \n  /**\n   * Handle collision with an obstacle\n   */\n  private handleCollision(): void {\n    // If bird has a shield, use it instead of game over\n    if (this.bird.hasShield) {\n      this.bird.hasShield = false;\n      this.playSound('hit');\n      return;\n    }\n    \n    // Otherwise, game over\n    this.handleGameOver();\n  }\n  \n  /**\n   * Check if the bird has passed a pipe\n   */\n  private checkPipePassed(): void {\n    for (const pipe of this.pipes) {\n      if (pipe.checkPassed(this.bird.position.x)) {\n        // Increment score (double if score boost is active)\n        const points = this.hasScoreBoost ? 2 : 1;\n        this.score += points;\n        \n        // Update high score if needed\n        if (this.score > this.highScore) {\n          this.highScore = this.score;\n          localStorage.setItem('flappyBirdHighScore', this.highScore.toString());\n        }\n        \n        // Add score effect\n        this.addScoreEffect(points);\n        \n        // Play score sound\n        this.playSound('score');\n        \n        break; // Only count one pipe at a time\n      }\n    }\n  }\n  \n  /**\n   * Add a score effect\n   */\n  private addScoreEffect(points: number): void {\n    // Create a score effect above the bird\n    const effect = new ScoreEffect(\n      this.bird.position.x,\n      this.bird.position.y - 50,\n      points === 1 ? '+1' : '+2'\n    );\n    \n    // Add to the game\n    this.scoreEffects.push(effect);\n    this.entities.push(effect);\n  }\n  \n  /**\n   * Clean up expired score effects\n   */\n  private cleanupScoreEffects(): void {\n    // Remove expired score effects\n    for (let i = this.scoreEffects.length - 1; i >= 0; i--) {\n      if (this.scoreEffects[i].isExpired()) {\n        // Remove from entities array\n        const entityIndex = this.entities.indexOf(this.scoreEffects[i]);\n        if (entityIndex !== -1) {\n          this.entities.splice(entityIndex, 1);\n        }\n        \n        // Remove from score effects array\n        this.scoreEffects.splice(i, 1);\n      }\n    }\n  }\n  \n  /**\n   * Clean up pipes that have moved off-screen\n   */\n  private cleanupPipes(): void {\n    // Remove pipes that have moved off-screen\n    for (let i = this.pipes.length - 1; i >= 0; i--) {\n      if (this.pipes[i].position.x + this.pipes[i].width / 2 < 0) {\n        // Remove from entities array\n        const entityIndex = this.entities.indexOf(this.pipes[i]);\n        if (entityIndex !== -1) {\n          this.entities.splice(entityIndex, 1);\n        }\n        \n        // Remove from pipes array\n        this.pipes.splice(i, 1);\n      }\n    }\n  }\n  \n  /**\n   * Draw the score on the screen\n   */\n  private drawScore(): void {\n    this.context.fillStyle = 'white';\n    this.context.strokeStyle = 'black';\n    this.context.lineWidth = 3;\n    this.context.font = 'bold 36px Arial';\n    this.context.textAlign = 'center';\n    this.context.textBaseline = 'top';\n    \n    // Draw score with outline\n    this.context.strokeText(this.score.toString(), this.gameWidth / 2, 20);\n    this.context.fillText(this.score.toString(), this.gameWidth / 2, 20);\n    \n    // Draw difficulty indicator\n    this.drawDifficultyIndicator();\n    \n    // Draw current difficulty level (for debugging)\n    if (false) { // Set to true to enable debug info\n      this.context.font = 'bold 14px Arial';\n      this.context.textAlign = 'left';\n      this.context.fillText(`Speed: ${Math.round(this.currentGameSpeed)}`, 10, 10);\n      this.context.fillText(`Gap: ${this.currentPipeGap}`, 10, 30);\n      this.context.fillText(`Interval: ${this.pipeSpawnInterval.toFixed(1)}s`, 10, 50);\n      this.context.fillText(`Special: ${this.useSpecialPipes ? 'Yes' : 'No'}`, 10, 70);\n    }\n  }\n  \n  /**\n   * Draw a visual indicator of the current difficulty level\n   */\n  private drawDifficultyIndicator(): void {\n    // Calculate difficulty level (0-5)\n    const maxDifficulty = 5;\n    const difficultyLevel = Math.min(\n      maxDifficulty,\n      Math.floor(this.score / 10)\n    );\n    \n    // Draw difficulty stars at the top right\n    const starSize = 20;\n    const starSpacing = 5;\n    const startX = this.gameWidth - (starSize * maxDifficulty) - (starSpacing * (maxDifficulty - 1)) - 10;\n    const startY = 20;\n    \n    // Draw empty stars first\n    for (let i = 0; i < maxDifficulty; i++) {\n      const x = startX + i * (starSize + starSpacing);\n      this.drawStar(x, startY, starSize, '#333333');\n    }\n    \n    // Draw filled stars based on current difficulty\n    for (let i = 0; i < difficultyLevel; i++) {\n      const x = startX + i * (starSize + starSpacing);\n      this.drawStar(x, startY, starSize, '#FFD700');\n    }\n  }\n  \n  /**\n   * Draw a star shape\n   */\n  private drawStar(x: number, y: number, size: number, color: string): void {\n    const spikes = 5;\n    const outerRadius = size / 2;\n    const innerRadius = outerRadius / 2;\n    \n    this.context.beginPath();\n    this.context.fillStyle = color;\n    this.context.strokeStyle = 'black';\n    this.context.lineWidth = 1;\n    \n    for (let i = 0; i < spikes * 2; i++) {\n      const radius = i % 2 === 0 ? outerRadius : innerRadius;\n      const angle = (Math.PI / spikes) * i;\n      const pointX = x + radius * Math.sin(angle);\n      const pointY = y + radius * Math.cos(angle);\n      \n      if (i === 0) {\n        this.context.moveTo(pointX, pointY);\n      } else {\n        this.context.lineTo(pointX, pointY);\n      }\n    }\n    \n    this.context.closePath();\n    this.context.fill();\n    this.context.stroke();\n  }\n  \n  /**\n   * Handle game over\n   */\n  private handleGameOver(): void {\n    if (this.gameOver) return; // Prevent multiple calls\n    \n    this.gameOver = true;\n    \n    // Play hit sound\n    this.playSound('hit');\n    \n    // Play die sound after a short delay\n    setTimeout(() => {\n      this.playSound('die');\n    }, 500);\n    \n    // Update high score if needed\n    if (this.score > this.highScore) {\n      this.highScore = this.score;\n      localStorage.setItem('flappyBirdHighScore', this.highScore.toString());\n    }\n    \n    // Update game over screen\n    document.getElementById('final-score')!.textContent = this.score.toString();\n    document.getElementById('high-score')!.textContent = this.highScore.toString();\n    \n    // Update difficulty stars\n    this.updateDifficultyStars();\n    \n    // Show game over screen after a short delay\n    setTimeout(() => {\n      document.getElementById('game-over-screen')!.style.display = 'flex';\n    }, 1000);\n  }\n  \n  /**\n   * Update the difficulty stars on the game over screen\n   */\n  private updateDifficultyStars(): void {\n    // Calculate difficulty level (0-5)\n    const maxDifficulty = 5;\n    const difficultyLevel = Math.min(\n      maxDifficulty,\n      Math.floor(this.score / 10)\n    );\n    \n    // Update star elements\n    for (let i = 1; i <= maxDifficulty; i++) {\n      const starElement = document.getElementById(`star-${i}`);\n      if (starElement) {\n        if (i <= difficultyLevel) {\n          starElement.classList.add('filled');\n        } else {\n          starElement.classList.remove('filled');\n        }\n      }\n    }\n  }\n  \n  /**\n   * Update power-up effects\n   */\n  private updatePowerUpEffects(deltaTime: number): void {\n    // Update slow motion effect\n    if (this.hasSlowMotion) {\n      this.slowMotionTimer += deltaTime;\n      if (this.slowMotionTimer >= this.slowMotionDuration) {\n        this.hasSlowMotion = false;\n        // Reset game speed when slow motion ends\n        this.updateEntitySpeeds();\n      }\n    }\n    \n    // Update score boost effect\n    if (this.hasScoreBoost) {\n      this.scoreBoostTimer += deltaTime;\n      if (this.scoreBoostTimer >= this.scoreBoostDuration) {\n        this.hasScoreBoost = false;\n      }\n    }\n  }\n  \n  /**\n   * Spawn a power-up at a random position\n   */\n  private spawnPowerUp(): void {\n    // Only spawn power-ups after a certain score\n    if (this.score < 10) return;\n    \n    // Random position (avoiding ground and top of screen)\n    const minY = this.gameHeight * 0.2;\n    const maxY = this.gameHeight * 0.7;\n    const y = minY + Math.random() * (maxY - minY);\n    \n    // Random power-up type\n    const types: PowerUpType[] = ['shield', 'slowmo', 'score'];\n    const randomType = types[Math.floor(Math.random() * types.length)];\n    \n    // Create power-up\n    const powerUp = new PowerUp(\n      this.gameWidth + 100, // Start off-screen\n      y,\n      randomType\n    );\n    \n    // Set the power-up's speed\n    powerUp.setSpeed(this.currentGameSpeed);\n    \n    // Add to the game\n    this.powerUps.push(powerUp);\n    this.entities.push(powerUp);\n  }\n  \n  /**\n   * Check if the bird has collected a power-up\n   */\n  private checkPowerUpCollected(): void {\n    for (let i = this.powerUps.length - 1; i >= 0; i--) {\n      const powerUp = this.powerUps[i];\n      \n      if (!powerUp.isCollected && this.bird.collidesWith(powerUp)) {\n        // Mark as collected\n        powerUp.isCollected = true;\n        \n        // Apply power-up effect\n        this.applyPowerUpEffect(powerUp.type, powerUp.position.x, powerUp.position.y);\n        \n        // Play sound\n        this.playSound('score'); // Reuse score sound for now\n        \n        // Remove from entities array\n        const entityIndex = this.entities.indexOf(powerUp);\n        if (entityIndex !== -1) {\n          this.entities.splice(entityIndex, 1);\n        }\n        \n        // Remove from power-ups array\n        this.powerUps.splice(i, 1);\n      }\n    }\n  }\n  \n  /**\n   * Apply a power-up effect\n   */\n  private applyPowerUpEffect(type: PowerUpType, x: number, y: number): void {\n    // Create a power-up effect\n    const effect = new PowerUpEffect(x, y, type);\n    this.powerUpEffects.push(effect);\n    this.entities.push(effect);\n    \n    // Apply the effect based on type\n    switch (type) {\n      case 'shield':\n        this.bird.activateShield();\n        break;\n      case 'slowmo':\n        this.hasSlowMotion = true;\n        this.slowMotionTimer = 0;\n        // Slow down the game speed\n        this.currentGameSpeed = GAME_SPEED * 0.5;\n        this.updateEntitySpeeds();\n        break;\n      case 'score':\n        this.hasScoreBoost = true;\n        this.scoreBoostTimer = 0;\n        break;\n    }\n  }\n  \n  /**\n   * Clean up expired power-up effects\n   */\n  private cleanupPowerUpEffects(): void {\n    // Remove expired power-up effects\n    for (let i = this.powerUpEffects.length - 1; i >= 0; i--) {\n      if (this.powerUpEffects[i].isExpired()) {\n        // Remove from entities array\n        const entityIndex = this.entities.indexOf(this.powerUpEffects[i]);\n        if (entityIndex !== -1) {\n          this.entities.splice(entityIndex, 1);\n        }\n        \n        // Remove from power-up effects array\n        this.powerUpEffects.splice(i, 1);\n      }\n    }\n  }\n  \n  /**\n   * Clean up power-ups that have moved off-screen\n   */\n  private cleanupPowerUps(): void {\n    // Remove power-ups that have moved off-screen\n    for (let i = this.powerUps.length - 1; i >= 0; i--) {\n      if (this.powerUps[i].position.x + this.powerUps[i].width / 2 < 0) {\n        // Remove from entities array\n        const entityIndex = this.entities.indexOf(this.powerUps[i]);\n        if (entityIndex !== -1) {\n          this.entities.splice(entityIndex, 1);\n        }\n        \n        // Remove from power-ups array\n        this.powerUps.splice(i, 1);\n      }\n    }\n  }\n  \n  /**\n   * Draw active power-up indicators\n   */\n  private drawActivePowerUps(): void {\n    // Position for the indicators\n    const startX = 10;\n    const startY = 60;\n    const iconSize = 30;\n    const spacing = 10;\n    let currentY = startY;\n    \n    // Draw shield indicator\n    if (this.bird.hasShield) {\n      this.drawPowerUpIndicator(startX, currentY, iconSize, 'shield', this.bird.shieldTimer / this.bird.shieldDuration);\n      currentY += iconSize + spacing;\n    }\n    \n    // Draw slow motion indicator\n    if (this.hasSlowMotion) {\n      this.drawPowerUpIndicator(startX, currentY, iconSize, 'slowmo', this.slowMotionTimer / this.slowMotionDuration);\n      currentY += iconSize + spacing;\n    }\n    \n    // Draw score boost indicator\n    if (this.hasScoreBoost) {\n      this.drawPowerUpIndicator(startX, currentY, iconSize, 'score', this.scoreBoostTimer / this.scoreBoostDuration);\n    }\n  }\n  \n  /**\n   * Draw a power-up indicator with timer\n   */\n  private drawPowerUpIndicator(x: number, y: number, size: number, type: PowerUpType, progress: number): void {\n    const halfSize = size / 2;\n    \n    // Draw background circle\n    this.context.fillStyle = 'rgba(0, 0, 0, 0.5)';\n    this.context.beginPath();\n    this.context.arc(x + halfSize, y + halfSize, halfSize, 0, Math.PI * 2);\n    this.context.fill();\n    \n    // Draw progress arc\n    this.context.strokeStyle = 'white';\n    this.context.lineWidth = 2;\n    this.context.beginPath();\n    this.context.arc(x + halfSize, y + halfSize, halfSize - 2, -Math.PI / 2, -Math.PI / 2 + (1 - progress) * Math.PI * 2);\n    this.context.stroke();\n    \n    // Draw icon\n    this.context.fillStyle = 'white';\n    this.context.strokeStyle = 'black';\n    this.context.lineWidth = 1;\n    \n    switch (type) {\n      case 'shield':\n        // Draw a shield icon\n        this.context.beginPath();\n        this.context.moveTo(x + halfSize, y + halfSize * 0.5);\n        this.context.lineTo(x + halfSize + halfSize * 0.6, y + halfSize + halfSize * 0.3);\n        this.context.lineTo(x + halfSize, y + halfSize + halfSize * 0.7);\n        this.context.lineTo(x + halfSize - halfSize * 0.6, y + halfSize + halfSize * 0.3);\n        this.context.closePath();\n        this.context.fill();\n        this.context.stroke();\n        break;\n      case 'slowmo':\n        // Draw a clock icon\n        this.context.beginPath();\n        this.context.arc(x + halfSize, y + halfSize, halfSize * 0.6, 0, Math.PI * 2);\n        this.context.fill();\n        this.context.stroke();\n        \n        // Draw clock hands\n        this.context.beginPath();\n        this.context.moveTo(x + halfSize, y + halfSize);\n        this.context.lineTo(x + halfSize, y + halfSize - halfSize * 0.4);\n        this.context.stroke();\n        \n        this.context.beginPath();\n        this.context.moveTo(x + halfSize, y + halfSize);\n        this.context.lineTo(x + halfSize + halfSize * 0.3, y + halfSize);\n        this.context.stroke();\n        break;\n      case 'score':\n        // Draw a star icon\n        const spikes = 5;\n        const outerRadius = halfSize * 0.7;\n        const innerRadius = outerRadius * 0.4;\n        \n        this.context.beginPath();\n        for (let i = 0; i < spikes * 2; i++) {\n          const radius = i % 2 === 0 ? outerRadius : innerRadius;\n          const angle = (Math.PI / spikes) * i - Math.PI / 2;\n          const pointX = x + halfSize + radius * Math.cos(angle);\n          const pointY = y + halfSize + radius * Math.sin(angle);\n          \n          if (i === 0) {\n            this.context.moveTo(pointX, pointY);\n          } else {\n            this.context.lineTo(pointX, pointY);\n          }\n        }\n        this.context.closePath();\n        this.context.fill();\n        this.context.stroke();\n        break;\n    }\n  }\n} ","import { Game } from './core/Game';\n\n// Wait for the DOM to be fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Initialize the game\n  const game = new Game();\n  \n  // Get UI elements\n  const startScreen = document.getElementById('start-screen') as HTMLDivElement;\n  const gameOverScreen = document.getElementById('game-over-screen') as HTMLDivElement;\n  const startButton = document.getElementById('start-button') as HTMLButtonElement;\n  const restartButton = document.getElementById('restart-button') as HTMLButtonElement;\n  const finalScoreElement = document.getElementById('final-score') as HTMLSpanElement;\n  const highScoreElement = document.getElementById('high-score') as HTMLSpanElement;\n  \n  // Add event listeners for game controls\n  startButton.addEventListener('click', () => {\n    startScreen.style.display = 'none';\n    game.start();\n  });\n  \n  restartButton.addEventListener('click', () => {\n    gameOverScreen.style.display = 'none';\n    game.restart();\n  });\n  \n  // Listen for game over event\n  document.addEventListener('gameOver', (e: Event) => {\n    const customEvent = e as CustomEvent;\n    const score = customEvent.detail.score;\n    const highScore = customEvent.detail.highScore;\n    \n    finalScoreElement.textContent = score.toString();\n    highScoreElement.textContent = highScore.toString();\n    \n    gameOverScreen.style.display = 'flex';\n  });\n}); "],"names":["Vector2","x","y","v","scalar","mag","Bird","color","__publicField","file","img","deltaTime","targetRotation","context","fillColor","shieldRadius","pulseScale","fadeOut","gradient","other","birdLeft","birdRight","birdTop","birdBottom","otherLeft","otherRight","otherTop","otherBottom","pipe","Ground","width","height","speed","GAME_SPEED","halfWidthA","halfHeightA","halfWidthB","halfHeightB","dx","dy","Pipe","isTop","isSpecial","pipeX","pipeY","capHeight","capWidth","pipeLeft","pipeRight","pipeTop","pipeBottom","birdX","pipeRightEdge","Background","BackgroundLayer","layer","bgHeight","bgWidth","repetitions","i","speedFactor","isCityscape","cloudType","isGround","currentSpeed","lastSegmentIndex","segment","groundWidth","ScoreEffect","text","progress","PowerUp","type","bobOffset","halfWidth","halfHeight","spikes","outerRadius","innerRadius","radius","angle","PowerUpEffect","InputHandler","event","key","MAX_GAME_SPEED","MIN_PIPE_GAP","INITIAL_PIPE_GAP","MIN_PIPE_INTERVAL","INITIAL_PIPE_INTERVAL","Game","savedHighScore","savedBirdColor","option","selectedOption","soundFiles","name","audio","sound","groundHeight","groundY","ground","e","characterOptions","target","opt","speedMultiplier","gapReduction","intervalReduction","timestamp","entity","variationFactor","minGapY","maxGapY","gapY","gapHeight","isSpecialPipe","topPipeHeight","topPipe","bottomPipeY","bottomPipeHeight","bottomPipe","points","effect","entityIndex","difficultyLevel","starSize","starSpacing","startX","startY","size","pointX","pointY","starElement","minY","maxY","types","randomType","powerUp","currentY","halfSize","game","startScreen","gameOverScreen","startButton","restartButton","finalScoreElement","highScoreElement","customEvent","score","highScore"],"mappings":"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"}